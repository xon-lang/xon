{
  "$schema": "../schemes/tmlanguage.json",
  "name": "xon",
  "scopeName": "source.xon",
  "patterns": [
    {
      "name": "comment.line.xon",
      "begin": "//",
      "end": "$"
    },
    {
      "name": "comment.block.xon",
      "begin": "---",
      "end": "---"
    },
    {
      "name": "comment.block.documentation.xon",
      "begin": "===",
      "end": "===",
      "patterns": [
        {
          "name": "storage.type.class.xon",
          "match": "@\\b[a-zA-Z_][A-Za-z0-9_]*\\b"
        }
      ]
    },
    {
      "name": "constant.numeric.xon",
      "match": "\\d+"
    },
    {
      "name": "string.quoted.double.xon",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.xon",
          "match": "\\\\."
        }
      ]
    },
    {
      "name": "string.quoted.single.xon",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "name": "constant.character.escape.xon",
          "match": "\\\\."
        }
      ]
    },
    {
      "begin": "\\b(type)\\b",
      "beginCaptures": {
        "1": {
          "name": "storage.type.xon"
        }
      },
      "end": "\\b[A-Za-z_][A-Za-z0-9_]*\\b",
      "endCaptures": {
        "0": {
          "name": "entity.name.type.xon"
        }
      }
    },
    {
      "name": "keyword.control.xon",
      "match": "\\b(if|for|else|select|while|return|break|continue|expect|actual|throw|import|export)\\b"
    },
    {
      "name": "keyword.operator.expression",
      "match": "\\b(is|as|in|or|and|not)\\b"
    },
    {
      "name": "entity.name.type.xon",
      "match": "\\b[A-Z_][A-Za-z0-9_]*\\b"
    },
    {
      "name": "variable.xon",
      "match": "\\b[a-z_][A-Za-z0-9_]*\\b"
    }
  ]
}
